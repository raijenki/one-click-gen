NAME          = "One-click Magnetometric Map Generator"
#include <version.gxh>
DESCRIPTION   = "
      This generator uses bigrid as base.  
"

// Revision History:
// v0.1: Actually generates grids and export maps.

RESOURCE = "magen.gr"


#include "magen.grh"
#include <all.gxh>

/////////////////////
//   Global vars   //
/////////////////////

////
// Mostly for grids
////
string(STR_DEFAULT_LONG) sTitle;
string(STR_DEFAULT_LONG) sText; // line for control file
string(STR_FILE) sFile_export;
string(STR_FILE) sFormat;
string(STR_FILE) sGrid, sName; // name of output grid
string(STR_DB_SYMBOL) magChan; // Total Count Channel
string(STR_DEFAULT_LONG) sCS; // grid cell size
string(STR_DB_SYMBOL) sXCh, sYCh; // default x and y
string(STR_DEFAULT_LONG) sUnits;
string(STR_DEFAULT_LONG) sNEX;
string(STR_DEFAULT_LONG) sISP1;
string(STR_DEFAULT_LONG) sISP2;
string(STR_DEFAULT_LONG) sPRESORT;
string(STR_DEFAULT_LONG) sLOGOPT;
string(STR_DEFAULT_LONG) sLOGMIN;
string(STR_DEFAULT_LONG) sXYRANGE;
string(STR_DEFAULT_LONG) sTRA;
string(STR_DEFAULT_LONG) sKX;
string(STR_DEFAULT_LONG) sSMX;
string(STR_DEFAULT_LONG) sGAPLIM;
string(STR_DEFAULT_LONG) sWS;
string(STR_DEFAULT_LONG) sWL;
string(STR_DEFAULT_LONG) sTOLN;
string(STR_DEFAULT_LONG) sFDX;
string(STR_DEFAULT_SHORT) sColor;


IMG IMGIN1;  // Image for the first input grid
IMG IMGIN2;  // Image for the second input grid
IMG IMGIN3; 
IMG IMGOUT_DX;  // Image for the output grid
IMG IMGOUT_DY;  // Image for the output grid
IMG IMGOUT_DZ;  // Image for the output grid
IMG IMGOUT_TDR;
IMG IMGOUT_THDR;
IMG IMGOUT_GT;
IEXP IEXP_tdr;  // Image expression to divide IN1 by IN2
IEXP IEXP_thdr;
IEXP IEXP_gt;
VV VVHzDrv;

int i, j, iTRA, iNew; // aux var
int iRunMode; // for v0.2 with 'advanced' menu
int maps;
real rTRA;
real rTOLN, rLS, rWS, rF, rFDX;

BIGRID Bigrid;  // Handle to BIGRIDd object
DAT InDat;      // Handle to Input DAT
DAT OutDat;     // Handle to Output DAT
WA ConFile, WA_con;  // Control File
EDB EData; // Database handle
DB Data;  // Database
DGW Diag; 
IPJ hIPJ;
DB_SYMB XCh;
LST MagList;    // TC channel list

// Mostly for crunching
real rXoe, rYoe;
real rDx, rDy, rXo, rYo, rRot; 
PG PG1;
PG PG2;
TR TR1;
int iNX, iNY, iNXe, iNYe, iXo, iYo; 
string(STR_FILE) sRefFil;


// Mostly for maps
string(GS_MAX_PATH) sFont, sGroup;
string(STR_GROUP) sGrpName;
string(STR_FILE) sMap;
string(STR_FILE) sGrid0, sGrid1, sGrid2, sGrid3, sGrid4, sGrid5, sGrid6;
string(STR_GROUP) sAgg;
string(STR_VIEW) sView;
MVIEW View, BaseView;
AGG Agg;
EMAP EMap;
MAP Map;
ITR Itr;
int iDec;
real rAnn, rHeight, rWidth, rX, rY;
real rMinLon, rMinLat, rMaxLon, rMaxLat;

#define MODE_NORMAL 0;
#define MODE_OPTIONS 1; // for v0.2 with 'advanced' menu

//////////////
// Gen Code //
//////////////

{
    // Get database (gamma)
    EData = Current_EDB();
    // Lock database 
    Data = Lock_EDB(EData);


    // Looks like iGetInt_SYS and SetInt_SYS works as INI, got this from original BIGRID code
    // This should be set everytime to normal behaviour
    iRunMode = iGetInt_SYS("MAGEN", "RUNMODE");
    SetInt_SYS("MAGEN", "RUNMODE", 0);

    // Sanity check to default behaviour
    if (iRunMode != 0) iRunMode = 1;


    // "Are we running iteractively?" IDK what this actually means. Geosoft babble.
    if (iInteractive_SYS()) {
        i = 1;
        while(i!=0) {
			switch(i) {
            /////////////////
            // Normal mode //
            /////////////////
            case 1: 
            // Create the dialogue
            Diag = Create_DGW("MAGFORM0");
            // Set up lists
            MagList = GetList_DGW(Diag, _MAGFORM0_0);

            // Symbolic link list -> db
            SymbLST_DB(Data, MagList, DB_SYMB_CHAN);

            // Sort lists in alphabetical order
            Sort_LST(MagList, 0, 0);

            // Set any defaults from INI
            SetInfoSYS_DGW(Diag, _MAGFORM0_0, DGW_TEXT, "MAGEN", "MAGCHAN");
            SetInfoSYS_DGW(Diag, _MAGFORM0_1, DGW_TEXT, "MAGEN", "CS");

            // Run the dialog
            i = iRunDialogue_DGW(Diag);
            if (i==-1) Cancel_SYS();

            // Put values back in INI 
            GetInfoSYS_DGW(Diag, _MAGFORM0_0, DGW_TEXT, "MAGEN", "MAGCHAN");
            GetInfoSYS_DGW(Diag, _MAGFORM0_1, DGW_TEXT, "MAGEN", "CS");

            Destroy_DGW(Diag);
            break;

            //////////////
            // Adv Mode // TBD
            //////////////

            case 2:
            DisplayMessage_SYS(_("Lost"), _("I'm lost"));
            i = 0;
            break;

            // Error (default)
            default:
            DisplayMessage_SYS(_("Lost"), _("I'm lost"));
            i = 0;
            break;
			}
        }
    }
    
    // Get parameters
    GetString_SYS("MAGEN", "MAGCHAN", magChan);
    GetString_SYS("MAGEN", "CS", sCS);
    
    // Validate all channels (sanity check)
    GetXYZChan_DB(Data, DB_CHAN_X, sXCh);
    GetXYZChan_DB(Data, DB_CHAN_Y, sYCh);

    if (!iExistChan_DB(Data, sXCh))
          Abort_SYS(_("The current X channel does not exist."));
    
	if (!iExistChan_DB(Data, sYCh))
          Abort_SYS(_("The current Y channel does not exist."));

    if (!iExistChan_DB(Data, magChan))
          Abort_SYS(_("TMI channel is not specified or does not exist"));



    // Set default parameters (TBD: allow customization)
      Strcpy_STR(sNEX, "1"); // extend 1 cell
      Strcpy_STR(sISP1, "2"); // akima spline down line
      Strcpy_STR(sISP2, "2"); // akima spline down-line
      Strcpy_STR(sPRESORT, "1"); // presort: pre-sort data
      Strcpy_STR(sLOGOPT, "0"); // linear
      rTOLN = rGetReal_SYS("BIGRID", "TOLN");
      rWS = rGetReal_SYS("BIGRID", "WS");
      rLS = rGetReal_SYS("BIGRID", "LS");
      rFDX = rGetReal_SYS("BIGRID", "FDX");
      rTRA = rGetReal_SYS("BIGRID", "TRA");
      iTRA = FALSE;

    // Number of maps: This is the kernel of all one-click-gen plugins
    // For Gamagen: Total Count, eTh, eK, eU, Ternary and 3x Ratios
    maps = 1;

    // Create directories
    iMakeDir_SYS("OCG");
    iMakeDir_SYS("OCG\\Grids");
    iMakeDir_SYS("OCG\\Maps");
    iMakeDir_SYS("OCG\\Exports");

    for(j = 0; j < maps; j++) {
      // Create control file
      ConFile = Create_WA("_bigrid.con", 0);
      Strcpy_STR(sTitle, _n("Channel "));


      if(j == 0) { // Specific info for Total Count
            Strcpy_STR(sGrid, "OCG\\Grids\\tmi.grd"); 
            Strcpy_STR(sGrid0, "OCG\\Grids\\tmi.grd"); 

            Strcat_STR(sTitle, magChan);
            Strcat_STR(sTitle, _n(" from "));
            GetName_DB(Data, DB_NAME_FILE, sText);
            Strcat_STR(sTitle, sText);
            Puts_WA(ConFile, sTitle);

            Strcpy_STR(sColor, "colour.tbl");  // Colour
            InDat = CreateDB_DAT(Data, sXCh, sYCh, magChan);
            OutDat = CreateXGD_DAT(sGrid, DAT_XGD_NEW);
      }
      
      // This generates the .con file. I am just copying this from the original Bigrid code.
      // Looks like even the original devs dont know what this does
      NewLine_WA(ConFile);
      Strcpy_STR(sText, sCS);
      Strcat_STR(sText, ",");
      Strcat_STR(sText, sNEX);
      Strcat_STR(sText, ",");
      Strcat_STR(sText, sPRESORT);
      Strcat_STR(sText, " /CS");
      Puts_WA(ConFile, sText);
      NewLine_WA(ConFile);

      Strcpy_STR(sText, sXYRANGE);
      Strcat_STR(sText, _n(" /XMIN,YMIN,XMAX,YMAX"));
      Puts_WA(ConFile, sText);
      NewLine_WA(ConFile);

      Strcpy_STR(sText, sTRA);
      Strcat_STR(sText, ",");
      Strcat_STR(sText, sKX);
      Strcat_STR(sText, " /TRA,KX");
      Puts_WA(ConFile, sText);
      NewLine_WA(ConFile);

      Strcpy_STR(sText, ",");
      Strcat_STR(sText, sSMX);
      Strcat_STR(sText, ",");
      Strcat_STR(sText, sGAPLIM);
      Strcat_STR(sText, ",,");
      Strcat_STR(sText, _n(",, /SLM,SMX,GAPLIM,LSEL"));
      Puts_WA(ConFile, sText);
      NewLine_WA(ConFile);

      Puts_WA(ConFile, _n("/SCL,SX,SY,ANGS"));
      NewLine_WA(ConFile);

      Strcpy_STR(sText, ",");
      Strcat_STR(sText, sLOGOPT);
      Strcat_STR(sText, ",");
      Strcat_STR(sText, sLOGMIN);
      Strcat_STR(sText, " /IZ,LOGZ,ZMIN");
      Puts_WA(ConFile, sText);
      NewLine_WA(ConFile);

      Puts_WA(ConFile, "/BL,XX");
      NewLine_WA(ConFile);

      Strcpy_STR(sText, sWS);
      Strcat_STR(sText, ",");
      Strcat_STR(sText, sWL);
      Strcat_STR(sText, ",");
      Strcat_STR(sText, sFDX);
      Strcat_STR(sText, _n(",,, /WS,WL,FDX,FT"));
      Puts_WA(ConFile, sText);
      NewLine_WA(ConFile);

      Strcpy_STR(sText, "");
      if (iStrcmp_STR(sTOLN, "", 0)) {
            Strcat_STR(sText, "1,");
            Strcat_STR(sText, sTOLN);
      }
      Strcat_STR(sText, " /NFLT,TOLN");
      Puts_WA(ConFile, sText);
      NewLine_WA(ConFile);

      Strcpy_STR(sText, sISP1);
      Strcat_STR(sText, ",");
      Strcat_STR(sText, sISP2);
      Strcat_STR(sText, " /ISP1,ISP2");
      Puts_WA(ConFile, sText);
      NewLine_WA(ConFile);

      // Destroy con file
      Destroy_WA(ConFile);

      // Delete existing grids
      if (iFileExist_SYS(sGrid)) {
            if (iInteractive_SYS())
                  iRemoveDocument_PROJ(sGrid);
            iDeleteGridFile_SYS(sGrid);
      }


      // Put hIPJ into image
      XCh = FindChan_DB(Data, sXCh);
      LockSymb_DB(Data, XCh, DB_LOCK_READONLY, DB_WAIT_NONE);
      hIPJ = Create_IPJ();
      GetIPJ_DB(Data, XCh, hIPJ);
      GetUnits_IPJ(hIPJ, rF, sUnits);
      SetUnits_IPJ(hIPJ, rF, sUnits);

      // Release symbol lock
      UnLockSymb_DB(Data, XCh);

      // Create Bigrid obj
      Bigrid = Create_BIGRID();

      // Load control parameters
      if (iLoadParms_BIGRID(Bigrid, "_bigrid.con"))
            Abort_SYS(_("Bad control file"));
      
      // BIGRID
      Progress_SYS(1);
      Run2_BIGRID(Bigrid, "1", InDat, OutDat, hIPJ);
      Progress_SYS(0);

      // Destroy objects
      Destroy_BIGRID(Bigrid);
      Destroy_DAT(InDat);
      Destroy_DAT(OutDat);    

      // Destroy tempfiles
      iDeleteFile_SYS("_bigrid.grd");
      iDeleteFile_SYS("_bigrid.con");
      
      
      // Add grid to project
      if (iInteractive_SYS())
             iAddDocument_PROJ(sGrid, "Grid", 1);
    }
      
      // This code will generate DX, DY, DZ, Tilt Derivative and Analytic Signal
      // Most of it was copied from the tiltdrv.gx

      // Set the names for all grids
      Strcpy_STR(sGrid1, "OCG\\Grids\\dx.grd");
      Strcpy_STR(sGrid2, "OCG\\Grids\\dy.grd");
      Strcpy_STR(sGrid3, "OCG\\Grids\\dz.grd");
      Strcpy_STR(sGrid4, "OCG\\Grids\\tiltdrv.grd");
      Strcpy_STR(sGrid5, "OCG\\Grids\\totalgrad.grd");
      Strcpy_STR(sGrid6, "OCG\\Grids\\thdr.grd");


      // This will calculate the z-derivative grid with fft method

      WA_con = Create_WA("_drvz.con", 0);
      i = 1;

      while (i <= 5) {
         NewLine_WA(WA_con);
         i++;
      }

      Puts_WA(WA_con, _n("DRVZ 1 /"));
      NewLine_WA(WA_con);
      Destroy_WA(WA_con);

      // Create ref file name

      FileNamePart_STR(sGrid3, sRefFil, STR_FILE_PART_NAME);
      Strcat_STR(sRefFil, "_ref.bin");

      rDx = 1.0;
      rDy = 1.0;
      rXo = 0.0;
      rYo = 0.0;
      rRot = 0.0;
      rXoe = 0.0;
      rYoe = 0.0;

      IMGIN1 = CreateFile_IMG(GS_FLOAT, sGrid0, IMG_FILE_READONLY);
      GetInfo_IMG(IMGIN1, rDx, rDy, rXo, rYo, rRot);
      iNX = iNX_IMG(IMGIN1);
      iNY = iNY_IMG(IMGIN1);
      TR1 = Create_TR(1);  //iTOrder
      PG1 = Create_PG(iNY, iNX, GS_FLOAT);
      GetPG_IMG(IMGIN1, PG1);
      Destroy_IMG(IMGIN1);

      // Grid Trend Remove ---

      PG2 = Create_PG(iNY, iNX, GS_FLOAT);
      if (Trend_PGU(PG1, PG2, TR1, 0, 1, rXo, rYo, rDx, rDy))
         // Trend_PGU(PG1,PG2,TR1,iTOpt,iTBase,rXo,rYo,rDx,rDy))
         Abort_SYS(_("Error executing Trend_PGU"));

      // Grid Expand ---

      if (Expand_PGU(PG2, PG1, 20.0, 0, 0, 0))
         // Expand_PGU(PG2,PG1,rPEx,iTEx,iXX,iXY))
         Abort_SYS(_("Error executing Expand_PGU"));
      Destroy_PG(PG2);

      iNYe = iNRows_PG(PG1);
      iNXe = iNCols_PG(PG1);
      iYo = (iNYe - iNY) / 2;
      iXo = (iNXe - iNX) / 2;

      // Grid Fill ---

      RefFile_PGU(PG1, sRefFil);

      if (Fill_PGU(PG1, 1, 0.0, -1, 0, 0, 0.0, -1.0, 0, 1, sRefFil))
         // Fill_PGU(PG1,iRollOpt,rRollBase,iZDist,iMxf,iMxp,rALim,rELim,iWLim,iNPass,sRefFil)
         Abort_SYS(_("Error executing Fill_PGU"));

      // FFT2 forward transform ---

      ReAllocate_PG(PG1, iNYe, iNXe + 2);
      TransPG_FFT2(PG1, 0);  // FFT2_PG_FORWARD  0

      // FFT2 Filter ---

      FilterPG_FFT2(PG1, "_drvz.con", TR1, rDx, rDy, rRot);

      // Inverse FFT ---

      TransPG_FFT2(PG1, 1);  // FFT2_PG_INVERSE  1
      ReAllocate_PG(PG1, iNYe, iNXe);

      // Grid Bool ---

      if (Bool_PGU(PG1, sRefFil))
         Abort_SYS(_("Error executing Bool_PGU"));

      PG2 = Create_PG(iNY, iNX, GS_FLOAT);
      CopySubset_PG(PG2, PG1, 0, 0, iYo, iXo, iNY, iNX);

      // Output grid ---

      IMGOUT_DZ = CreateNewFile_IMG(GS_FLOAT, 1, iNX, iNY, sGrid3);
      SetInfo_IMG(IMGOUT_DZ, rDx, rDy, rXo, rYo, rRot);
      SetTR_IMG(IMGOUT_DZ, TR1);
      SetPG_IMG(IMGOUT_DZ, PG2);
      Destroy_IMG(IMGOUT_DZ);

      Destroy_PG(PG1);
      Destroy_PG(PG2);
      Destroy_TR(TR1);

      if (iFileExist_SYS(sRefFil)) {
         iDeleteFile_SYS(sRefFil);
      }

      //
      // This will calculate X-derivative grid
      //

      IMGIN2 = CreateFile_IMG(GS_FLOAT, sGrid0, IMG_FILE_READONLY);
      IMGOUT_DX = CreateOutFile_IMG(GS_FLOAT, sGrid1, IMGIN2);

      rDx = 1.0;
      rDy = 1.0;
      rXo = 0.0;
      rYo = 0.0;
      rRot = 0.0;
      GetInfo_IMG(IMGIN2, rDx, rDy, rXo, rYo, rRot);

      VVHzDrv = Create_VV(REAL, 10);
      for (i = 0; i < 9; i++) {
            SetReal_VV(VVHzDrv, i, 0.0);
      }

      SetReal_VV(VVHzDrv, 3, -0.5 / rDx);
      SetReal_VV(VVHzDrv, 5, 0.5 / rDx);

      if (GridFilt_IMU(IMGIN2, IMGOUT_DX, 1, 1.0, IMU_FILT_DUMMY_NO, IMU_FILT_HZDRV_NO, IMU_FILT_FILE_NO, "", VVHzDrv)) {
      Destroy_IMG(IMGIN2);
      Destroy_IMG(IMGOUT_DX);
      Abort_SYS(_("Grid filter operation failed."));
   }

      // --- Destroy Image ---

      Destroy_IMG(IMGOUT_DX);

      // This will calculate Y-derivative grid
      IMGIN3 = CreateFile_IMG(GS_FLOAT, sGrid0, IMG_FILE_READONLY);
      IMGOUT_DY = CreateOutFile_IMG(GS_FLOAT, sGrid2, IMGIN3);
      for (i = 0; i < 9; i++) { 
            SetReal_VV(VVHzDrv, i, 0.0);
      }
      SetReal_VV(VVHzDrv, 1, 0.5 / rDy);
      SetReal_VV(VVHzDrv, 7, -0.5 / rDy);

      // Y-Derivative Step 3: GridFilt

      if (GridFilt_IMU(IMGIN3, IMGOUT_DY, 1, 1.0, IMU_FILT_DUMMY_NO, IMU_FILT_HZDRV_NO, IMU_FILT_FILE_NO, "", VVHzDrv)) {
            Destroy_IMG(IMGIN3);
            Destroy_IMG(IMGOUT_DY);
            Destroy_VV(VVHzDrv);
            Abort_SYS(_("Grid filter operation failed."));
      }

      // --- Cleanup ---

      Destroy_IMG(IMGIN3);
      Destroy_IMG(IMGOUT_DY);
      Destroy_VV(VVHzDrv);

      // This will calculate Tilt-derivative, THDR and TDR

      IEXP_tdr = Create_IEXP();
      IEXP_gt = Create_IEXP();
      IEXP_thdr = Create_IEXP();

      IMGIN1 = CreateFile_IMG(GS_DOUBLE, "OCG\\Grids\\dx.grd(GRD;comp=none)", IMG_FILE_READONLY);
      IMGIN2 = CreateFile_IMG(GS_DOUBLE, "OCG\\Grids\\dy.grd(GRD;comp=none)", IMG_FILE_READONLY);
      IMGIN3 = CreateFile_IMG(GS_DOUBLE, "OCG\\Grids\\dz.grd(GRD;comp=none)", IMG_FILE_READONLY);
      IMGOUT_TDR = CreateOutFile_IMG(GS_DOUBLE, "OCG\\Grids\\tiltdrv.grd(GRD;comp=none)", IMGIN1);
      IMGOUT_GT = CreateOutFile_IMG(GS_DOUBLE, "OCG\\Grids\\totalgrad.grd(GRD;comp=none)", IMGIN1);
      IMGOUT_THDR = CreateOutFile_IMG(GS_DOUBLE, "OCG\\Grids\\thdr.grd(GRD;comp=none)", IMGIN1);

      AddGrid_IEXP(IEXP_tdr, IMGIN1, "dx");
      AddGrid_IEXP(IEXP_tdr, IMGIN2, "dy");
      AddGrid_IEXP(IEXP_tdr, IMGIN3, "dz");
      AddGrid_IEXP(IEXP_tdr, IMGOUT_TDR, "tdr");

      AddGrid_IEXP(IEXP_gt, IMGIN1, "dx");
      AddGrid_IEXP(IEXP_gt, IMGIN2, "dy");
      AddGrid_IEXP(IEXP_gt, IMGIN3, "dz");
      AddGrid_IEXP(IEXP_gt, IMGOUT_GT, "gt");

      AddGrid_IEXP(IEXP_thdr, IMGIN1, "dx");
      AddGrid_IEXP(IEXP_thdr, IMGIN2, "dy");
      AddGrid_IEXP(IEXP_thdr, IMGIN3, "dz");
      AddGrid_IEXP(IEXP_thdr, IMGOUT_THDR, "thdr");

      DoFormula_IEXP(IEXP_thdr, "thdr=sqrt(dx*dx+dy*dy);", 100);
      DoFormula_IEXP(IEXP_gt, "gt=sqrt(dx*dx+dy*dy+dz*dz);", 100);
      DoFormula_IEXP(IEXP_tdr, "tdr=atan2(dz,sqrt(dx*dx+dy*dy));", 100);


      // Cleanup
      Destroy_IEXP(IEXP_tdr);
      Destroy_IEXP(IEXP_thdr);
      Destroy_IEXP(IEXP_gt);
      Destroy_IMG(IMGIN1);
      Destroy_IMG(IMGIN2);
      Destroy_IMG(IMGIN3);
      Destroy_IMG(IMGOUT_TDR);
      Destroy_IMG(IMGOUT_GT);
      Destroy_IMG(IMGOUT_THDR);
      
         // Add files to project
      iAddDocument_PROJ(sGrid1, "Grid", 1); // dx
      iAddDocument_PROJ(sGrid2, "Grid", 1); // dy
      iAddDocument_PROJ(sGrid3, "Grid", 1); // dz
      iAddDocument_PROJ(sGrid4, "Grid", 1); // dz
      iAddDocument_PROJ(sGrid5, "Grid", 1); // dz
      iAddDocument_PROJ(sGrid6, "Grid", 1); // dz 

      ////
      // Maps
      ////

      
      // Let's always create a new map
      SetString_SYS("MAGEN", "NEW", "1");
      Strcpy_STR(sMap, "OCG\\Maps\\OCG_mag.map");  // Map name


      // Should we create a new map? Default is yes
      iNew = iGetInt_SYS("MAGEN", "NEW");

      if (iNew != 0) {
            // --- range the grid ---
            SetString_SYS("IMGRANGE", "FILE", sGrid);
            if (iRunGX_SYS("imgrange.gx")) Abort_SYS(_("Failed to determine grid range."));
            
            // We set the name at DEFMAP/MAP to use 
            SetString_SYS("DEFMAP", "MAP", sMap);
            if (iRunGX_SYS("defmap.gx")) Cancel_SYS(); // This script creates a map
            SetString_SYS("MAGEN", "NEW", "0");  
      }

      // Sanity check on grid
      if(iRunGX_SYS("sclgrd") == -1) Cancel_SYS();
      if (iRunGX_SYS("sclmap") != 0) Cancel_SYS();


      SetInteractive_SYS(0);
      // Loop over 0-6
      maps = 7;
      for (j = 0; j < maps; j++) {
            EMap = Current_EMAP();
            Map = Lock_EMAP(EMap);
            Agg = Create_AGG();

            Progress_SYS(1);
            ProgName_SYS(_("Layer"), 1);
            if (j == 0) LayerIMG_AGG(Agg, sGrid0, 0, sColor, rDUMMY);
            if (j == 1) LayerIMG_AGG(Agg, sGrid1, 0, sColor, rDUMMY);
            if (j == 2) LayerIMG_AGG(Agg, sGrid2, 0, sColor, rDUMMY);
            if (j == 3) LayerIMG_AGG(Agg, sGrid3, 0, sColor, rDUMMY);
            if (j == 4) LayerIMG_AGG(Agg, sGrid4, 0, sColor, rDUMMY);
            if (j == 5) LayerIMG_AGG(Agg, sGrid5, 0, sColor, rDUMMY);
            if (j == 6) LayerIMG_AGG(Agg, sGrid6, 0, sColor, rDUMMY);
            Progress_SYS(0);

            View = Create_MVIEW(Map, "*Data", MVIEW_WRITEOLD);

            GroupClipMode_MVIEW(View, TRUE);

            //if (j == 0) { 
            //      DisplayMessage_SYS(_("Locate Color Bar"), _("Click on the location for the bottom left corner of the bar."));
            //      if (iGetPoint_EMAP(EMap, _("Locate Color Bar..."), rX, rY)) Cancel_SYS();
            //}
            Strcpy_STR(sAgg,"OCG_");
            Strcpy_STR(sName,"");
            if (j == 0) FileNamePart_STR(sGrid0, sName, STR_FILE_PART_NAME);
            if (j == 1) FileNamePart_STR(sGrid1, sName, STR_FILE_PART_NAME);
            if (j == 2) FileNamePart_STR(sGrid2, sName, STR_FILE_PART_NAME);
            if (j == 3) FileNamePart_STR(sGrid3, sName, STR_FILE_PART_NAME);
            if (j == 4) FileNamePart_STR(sGrid4, sName, STR_FILE_PART_NAME);
            if (j == 5) FileNamePart_STR(sGrid5, sName, STR_FILE_PART_NAME);
            if (j == 6) FileNamePart_STR(sGrid6, sName, STR_FILE_PART_NAME);
            ToLower_STR(sName);
            Strcat_STR(sAgg, sName);
            
            Aggregate_MVIEW(View, Agg, sAgg);
            GroupClipMode_MVIEW(View, FALSE);
            StartGroup_MVIEW(View, sAgg, MVIEW_GROUP_APPEND);
            //ExportAllInView_MAP(Map, "teste.tif", "*Data", rDUMMY, 300.0, MAP_EXPORT_BITS_32, MAP_EXPORT_METHOD_STANDARD, MAP_EXPORT_FORMAT_GTIFF, "");
            Destroy_MVIEW(View);


            // Legend Color bar for each
            iDec = 1;
            rAnn = 1.5;
            rHeight = 3.0;
            rWidth = 4.0;
            rX = 20.0;
            rY = 30.0;
            if (j == 0) Itr = CreateMap_ITR(Map, "Data\\OCG_tmi\\tmi");
            if (j == 1) Itr = CreateMap_ITR(Map, "Data\\OCG_dx\\dx");
            if (j == 2) Itr = CreateMap_ITR(Map, "Data\\OCG_dy\\dy");
            if (j == 3) Itr = CreateMap_ITR(Map, "Data\\OCG_dz\\dz");
            if (j == 4) Itr = CreateMap_ITR(Map, "Data\\OCG_tiltdrv\\tiltdrv");
            if (j == 5) Itr = CreateMap_ITR(Map, "Data\\OCG_totalgrad\\totalgrad");
            if (j == 6) Itr = CreateMap_ITR(Map, "Data\\OCG_thdr\\thdr");
            Strcpy_STR(sName, sAgg);
            i = iTokens_STR(sName, "\\");
            GetToken_STR(sGroup, sName, (i - 1));
            GenGroupName_STR(_n("ColorBar"), sGroup, "", sGrpName);
            Strcpy_STR(sName, sGrpName);
            
            BaseView = Create_MVIEW(Map, "*Base", MVIEW_WRITEOLD);
            StartGroup_MVIEW(BaseView, sName, MVIEW_GROUP_NEW);

            if (iGlobal_SYS("MONTAJ.DEFAULT_MAP_FONT", sFont) == 1)
                  Strcpy_STR(sFont, "Arial");
            TextFont_MVIEW(BaseView, sFont, FALSE, MVIEW_FONT_WEIGHT_NORMAL, FALSE);
            TextColor_MVIEW(BaseView, C_BLACK);
            ColorBar_MVU(BaseView,Itr,iDec,rAnn,rHeight,rWidth,rX,rY);
            Destroy_MVIEW(BaseView);
            UnLock_EMAP(EMap); 
            Destroy_AGG(Agg);
      }

      //
      // This is the export section
      //

      // Get current map and set views (pretty redundant, but this works)
      EMap = Current_EMAP();
      Map = Lock_EMAP(EMap);
      View = Create_MVIEW(Map, "*Data", MVIEW_WRITEOLD);
      BaseView = Create_MVIEW(Map, "*Base", MVIEW_WRITEOLD);
      
      // This will hide our colour legends
      HideMarkedGroups_MVIEW(BaseView, 1);
      Destroy_MVIEW(BaseView);
      Destroy_MVIEW(View);

      GetClassName_MAP(Map, "Data", sView);
      View = Create_MVIEW(Map, sView, MVIEW_READ);
      rMinLon = rGetReal_SYS("XYRANGE", "MIN_X");
      rMinLat = rGetReal_SYS("XYRANGE", "MIN_Y");
      rMaxLon = rGetReal_SYS("XYRANGE", "MAX_X");
      rMaxLat = rGetReal_SYS("XYRANGE", "MAX_Y");
      Destroy_MVIEW(View);
      Strcpy_STR(sFormat, "GTIFF"); 


      // This is our export loop for images
      for(j = 0; j < maps; j++) {
            View = Create_MVIEW(Map, sView, MVIEW_WRITEOLD);
            if (j == 0) { 
                  MoveGroupToFront_MVIEW(View, "OCG_tmi");
                  Strcpy_STR(sFile_export, "OCG\\Exports\\OCG_tmi.tif");  
                  Destroy_MVIEW(View);
                  }
            if (j == 1) {
                  MoveGroupToFront_MVIEW(View, "OCG_dx");
                  Strcpy_STR(sFile_export, "OCG\\Exports\\OCG_dx.tif"); 
                  Destroy_MVIEW(View);
                  }
            if (j == 2) {
                  MoveGroupToFront_MVIEW(View, "OCG_dy");
                  Strcpy_STR(sFile_export, "OCG\\Exports\\OCG_dy.tif"); 
                  Destroy_MVIEW(View);
            }
            if (j == 3) {
                  MoveGroupToFront_MVIEW(View, "OCG_dz");
                  Strcpy_STR(sFile_export, "OCG\\Exports\\OCG_dz.tif"); 
                  Destroy_MVIEW(View);
            }
            if (j == 4) {
                  MoveGroupToFront_MVIEW(View, "OCG_tiltdrv");
                  Strcpy_STR(sFile_export, "OCG\\Exports\\OCG_tiltdrv.tif");
                  Destroy_MVIEW(View); 
            }
            if (j == 5) {
                  MoveGroupToFront_MVIEW(View, "OCG_totalgrad");
                  Strcpy_STR(sFile_export, "OCG\\Exports\\OCG_totalgrad.tif"); 
                  Destroy_MVIEW(View);
            }
            if (j == 6) {
                  MoveGroupToFront_MVIEW(View, "OCG_thdr");
                  Strcpy_STR(sFile_export, "OCG\\Exports\\OCG_thdr.tif"); 
                  Destroy_MVIEW(View);
            }

            Progress_SYS(1);
            //ExportAreaRaster_MAP(Map, sFile_export, sView, rMinLon, rMinLat, rMaxLon, rMaxLat, 0, 0, 300.0, 32, 0, sFormat, "" );
            ExportAreaInView_MAP(Map, sFile_export, sView, rDUMMY, 300.0, 24, 2, rMinLon, rMinLat, rMaxLon, rMaxLat, sFormat, "");
            Progress_SYS(0);
      }

      // Unlock map
      UnLock_EMAP(EMap); 

      // Destroy IPJ and Unlock DB
      Destroy_IPJ(hIPJ);
      UnLock_EDB(EData);
}